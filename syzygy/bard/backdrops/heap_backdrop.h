// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Declares a backdrop class to be used with Heap events.
#ifndef SYZYGY_BARD_BACKDROPS_HEAP_BACKDROP_H_
#define SYZYGY_BARD_BACKDROPS_HEAP_BACKDROP_H_

#include <windows.h>

#include <map>
#include <string>

#include "base/basictypes.h"
#include "base/synchronization/lock.h"
#include "syzygy/bard/trace_live_map.h"

namespace bard {
namespace backdrops {

// Backdrop class to be used with Heap management events. It stores the
// existing heaps and objects, and maps them from and to their trace file
// addresses. It also stores the total time taken to run all the commands
// so far.
// The class is thread safe for simultaneous access across multiple threads.
class HeapBackdrop {
 public:
  HeapBackdrop();

  // TraceLiveMap accessors.
  TraceLiveMap<HANDLE>& heap_map() { return heap_map_; }
  TraceLiveMap<LPVOID>& alloc_map() { return alloc_map_; }

  const TraceLiveMap<HANDLE>& heap_map() const { return heap_map_; }
  const TraceLiveMap<LPVOID>& alloc_map() const { return alloc_map_; }

  // Update the total time taken by a event with name @p name.
  // @param name the name of the heap function call.
  // @param time the time the heap call took to run, in cycles as
  //     measured by rdtsc.
  void UpdateStats(std::string name, uint64 time);

  // Exposed for unittesting.
 protected:
  // The following struct holds the statistics generated by a specific
  // function call: the sum of the time it takes to run and the number
  // of times it was called.
  struct Stats {
    uint64 time;
    uint64 calls;
  };

  TraceLiveMap<HANDLE> heap_map_;
  TraceLiveMap<LPVOID> alloc_map_;

  std::map<std::string, struct Stats> total_stats_;

  base::Lock lock_;

 private:
  DISALLOW_COPY_AND_ASSIGN(HeapBackdrop);
};

}  // namespace backdrops
}  // namespace bard

#endif  // SYZYGY_BARD_BACKDROPS_HEAP_BACKDROP_H_
