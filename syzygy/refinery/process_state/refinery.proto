// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package refinery;

message Bytes {
  optional bytes data = 1;
}

// TODO(siggi, manzagop): Should this split into optional architecture-specific
//    sub-structures?
message RegisterInformation {
  optional uint32 seg_gs = 1;
  optional uint32 seg_fs = 2;
  optional uint32 seg_es = 3;
  optional uint32 seg_ds = 4;
  optional uint32 edi = 5;
  optional uint32 esi = 6;
  optional uint32 ebx = 7;
  optional uint32 edx = 8;
  optional uint32 ecx = 9;
  optional uint32 eax = 10;
  optional uint32 ebp = 11;
  optional uint32 eip = 12;
  optional uint32 seg_cs = 13;
  optional uint32 eflags = 14;
  optional uint32 esp = 15;
  optional uint32 seg_ss = 16;
};

message Exception {
  optional uint32 thread_id = 1;

  optional uint32 exception_code = 2;
  optional uint32 exception_flags = 3;
  optional uint64 exception_record = 4;
  optional uint64 exception_address = 5;
  repeated uint64 exception_information = 6;

  optional RegisterInformation register_info = 7;
}

// TODO(siggi, manzagop): Should this have optional platform-specific
//    sub-structures?
message ThreadInformation {
  optional uint32 thread_id = 1;
  optional uint32 suspend_count = 2;
  optional uint32 priority_class = 3;
  optional uint32 priority = 4;

  optional uint64 teb_address = 5;

  optional RegisterInformation register_info = 6;
  optional Exception exception = 7;
}

// Also holds thread information.
message Stack {
  optional ThreadInformation thread_info = 1;
}

message StackFrame {
}

message HeapSnippet {
}

message TypedBlock {
}

message Module {
  optional uint32 checksum = 1;
  optional uint32 timestamp = 2;
  optional string name = 3;
}

// TODO(manzagop): flesh out ValidationReport once we have a better idea of the
// kinds of violations there can be. There will probably be notions of
// expectation vs observation.

enum ViolationType {
  VIOLATION_UNKNOWN = 0;
  VIOLATION_NO_EXCEPTION_REGISTRATION_RECORD = 1;
  VIOLATION_EXCEPTION_REGISTRATION_RECORD_NOT_IN_STACK = 2;
  VIOLATION_EXCEPTION_CHAIN_ADDRESS_DECREASE = 3;

}

message Violation {
  optional ViolationType type = 1;
  optional string description = 2;
}

message ValidationReport {
  repeated Violation error = 1;
}
